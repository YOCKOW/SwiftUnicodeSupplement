//# DO NOT MODIFY.
//# This is autogenerated by `ySwiftCodeUpdater`(https://github.com/YOCKOW/ySwiftCodeUpdater).
//# Please see documents in this project to learn how to regenerate.
//# The material(s) to generate this file was/were obtained from below:
//
// URL: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
// Last-Modified: 2019-03-11T16:41:19Z
// ETag: "774022-1e2a2-583d43df009c0"

/*
  UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE
  
  See <a href="https://www.unicode.org/copyright.html">Terms of Use</a> for definitions of Unicode Inc.'s
  Data Files and Software.
  NOTICE TO USER: Carefully read the following legal agreement.
  BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S
  DATA FILES ("DATA FILES"), AND/OR SOFTWARE ("SOFTWARE"),
  YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE
  TERMS AND CONDITIONS OF THIS AGREEMENT.
  IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE
  THE DATA FILES OR SOFTWARE.
  COPYRIGHT AND PERMISSION NOTICE
  Copyright Â© 1991-2019 Unicode, Inc. All rights reserved.
  Distributed under the Terms of Use in https://www.unicode.org/copyright.html.
  Permission is hereby granted, free of charge, to any person obtaining
  a copy of the Unicode data files and any associated documentation
  (the "Data Files") or Unicode software and any associated documentation
  (the "Software") to deal in the Data Files or Software
  without restriction, including without limitation the rights to use,
  copy, modify, merge, publish, distribute, and/or sell copies of
  the Data Files or Software, and to permit persons to whom the Data Files
  or Software are furnished to do so, provided that either
  (a) this copyright and permission notice appear with all copies
  of the Data Files or Software, or
  (b) this copyright and permission notice appear in associated
  Documentation.
  THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY OF
  ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT OF THIRD PARTY RIGHTS.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
  NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
  DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
  DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THE DATA FILES OR SOFTWARE.
  Except as contained in this notice, the name of a copyright holder
  shall not be used in advertising or otherwise to promote the sale,
  use or other dealings in these Data Files or Software without prior
  written authorization of the copyright holder.
*/

// Required Modules
import Ranges

// Type Aliases
private typealias _T0 = Unicode.Scalar.Value
private typealias _T1 = Set<_T0>
private typealias _T2 = AnyRange<_T0>
private typealias _T3 = Array<_T2>

private let __prop_ASCII_Hex_Digit_set: _T1 = [
  0x30,
  0x31,
  0x32,
  0x33,
  0x34,
  0x35,
  0x36,
  0x37,
  0x38,
  0x39,
  0x41,
  0x42,
  0x43,
  0x44,
  0x45,
  0x46,
  0x61,
  0x62,
  0x63,
  0x64,
  0x65,
  0x66,
]
private let __prop_ASCII_Hex_Digit_array: _T3 = [
]
private let __prop_ASCII_Hex_Digit_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_ASCII_Hex_Digit_array)
internal let _prop_ASCII_Hex_Digit = UnicodeScalarValueSet(singleValues: __prop_ASCII_Hex_Digit_set, ranges: __prop_ASCII_Hex_Digit_ranges)
private let __prop_Bidi_Control_set: _T1 = [
  0x61c,
  0x200e,
  0x200f,
  0x202a,
  0x202b,
  0x202c,
  0x202d,
  0x202e,
  0x2066,
  0x2067,
  0x2068,
  0x2069,
]
private let __prop_Bidi_Control_array: _T3 = [
]
private let __prop_Bidi_Control_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Bidi_Control_array)
internal let _prop_Bidi_Control = UnicodeScalarValueSet(singleValues: __prop_Bidi_Control_set, ranges: __prop_Bidi_Control_ranges)
private let __prop_Dash_set: _T1 = [
  0x2d,
  0x58a,
  0x5be,
  0x1400,
  0x1806,
  0x2010,
  0x2011,
  0x2012,
  0x2013,
  0x2014,
  0x2015,
  0x2053,
  0x207b,
  0x208b,
  0x2212,
  0x2e17,
  0x2e1a,
  0x2e3a,
  0x2e3b,
  0x2e40,
  0x301c,
  0x3030,
  0x30a0,
  0xfe31,
  0xfe32,
  0xfe58,
  0xfe63,
  0xff0d,
]
private let __prop_Dash_array: _T3 = [
]
private let __prop_Dash_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Dash_array)
internal let _prop_Dash = UnicodeScalarValueSet(singleValues: __prop_Dash_set, ranges: __prop_Dash_ranges)
private let __prop_Deprecated_set: _T1 = [
  0x149,
  0x673,
  0xf77,
  0xf79,
  0x17a3,
  0x17a4,
  0x206a,
  0x206b,
  0x206c,
  0x206d,
  0x206e,
  0x206f,
  0x2329,
  0x232a,
  0xe0001,
]
private let __prop_Deprecated_array: _T3 = [
]
private let __prop_Deprecated_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Deprecated_array)
internal let _prop_Deprecated = UnicodeScalarValueSet(singleValues: __prop_Deprecated_set, ranges: __prop_Deprecated_ranges)
private let __prop_Diacritic_set: _T1 = [
  0x5e,
  0x60,
  0xa8,
  0xaf,
  0xb4,
  0xb7,
  0xb8,
  0x350,
  0x351,
  0x352,
  0x353,
  0x354,
  0x355,
  0x356,
  0x357,
  0x35d,
  0x35e,
  0x35f,
  0x360,
  0x361,
  0x362,
  0x374,
  0x375,
  0x37a,
  0x384,
  0x385,
  0x483,
  0x484,
  0x485,
  0x486,
  0x487,
  0x559,
  0x5bf,
  0x5c1,
  0x5c2,
  0x5c4,
  0x64b,
  0x64c,
  0x64d,
  0x64e,
  0x64f,
  0x650,
  0x651,
  0x652,
  0x657,
  0x658,
  0x6df,
  0x6e0,
  0x6e5,
  0x6e6,
  0x6ea,
  0x6eb,
  0x6ec,
  0x7a6,
  0x7a7,
  0x7a8,
  0x7a9,
  0x7aa,
  0x7ab,
  0x7ac,
  0x7ad,
  0x7ae,
  0x7af,
  0x7b0,
  0x7eb,
  0x7ec,
  0x7ed,
  0x7ee,
  0x7ef,
  0x7f0,
  0x7f1,
  0x7f2,
  0x7f3,
  0x7f4,
  0x7f5,
  0x818,
  0x819,
  0x93c,
  0x94d,
  0x951,
  0x952,
  0x953,
  0x954,
  0x971,
  0x9bc,
  0x9cd,
  0xa3c,
  0xa4d,
  0xabc,
  0xacd,
  0xafd,
  0xafe,
  0xaff,
  0xb3c,
  0xb4d,
  0xbcd,
  0xc4d,
  0xcbc,
  0xccd,
  0xd3b,
  0xd3c,
  0xd4d,
  0xdca,
  0xe47,
  0xe48,
  0xe49,
  0xe4a,
  0xe4b,
  0xe4c,
  0xe4e,
  0xeba,
  0xec8,
  0xec9,
  0xeca,
  0xecb,
  0xecc,
  0xf18,
  0xf19,
  0xf35,
  0xf37,
  0xf39,
  0xf3e,
  0xf3f,
  0xf82,
  0xf83,
  0xf84,
  0xf86,
  0xf87,
  0xfc6,
  0x1037,
  0x1039,
  0x103a,
  0x1063,
  0x1064,
  0x1069,
  0x106a,
  0x106b,
  0x106c,
  0x106d,
  0x1087,
  0x1088,
  0x1089,
  0x108a,
  0x108b,
  0x108c,
  0x108d,
  0x108f,
  0x109a,
  0x109b,
  0x135d,
  0x135e,
  0x135f,
  0x17c9,
  0x17ca,
  0x17cb,
  0x17cc,
  0x17cd,
  0x17ce,
  0x17cf,
  0x17d0,
  0x17d1,
  0x17d2,
  0x17d3,
  0x17dd,
  0x1939,
  0x193a,
  0x193b,
  0x1a75,
  0x1a76,
  0x1a77,
  0x1a78,
  0x1a79,
  0x1a7a,
  0x1a7b,
  0x1a7c,
  0x1a7f,
  0x1ab0,
  0x1ab1,
  0x1ab2,
  0x1ab3,
  0x1ab4,
  0x1ab5,
  0x1ab6,
  0x1ab7,
  0x1ab8,
  0x1ab9,
  0x1aba,
  0x1abb,
  0x1abc,
  0x1abd,
  0x1b34,
  0x1b44,
  0x1b6b,
  0x1b6c,
  0x1b6d,
  0x1b6e,
  0x1b6f,
  0x1b70,
  0x1b71,
  0x1b72,
  0x1b73,
  0x1baa,
  0x1bab,
  0x1c36,
  0x1c37,
  0x1c78,
  0x1c79,
  0x1c7a,
  0x1c7b,
  0x1c7c,
  0x1c7d,
  0x1ced,
  0x1cf4,
  0x1cf7,
  0x1cf8,
  0x1cf9,
  0x1dc4,
  0x1dc5,
  0x1dc6,
  0x1dc7,
  0x1dc8,
  0x1dc9,
  0x1dca,
  0x1dcb,
  0x1dcc,
  0x1dcd,
  0x1dce,
  0x1dcf,
  0x1df5,
  0x1df6,
  0x1df7,
  0x1df8,
  0x1df9,
  0x1dfd,
  0x1dfe,
  0x1dff,
  0x1fbd,
  0x1fbf,
  0x1fc0,
  0x1fc1,
  0x1fcd,
  0x1fce,
  0x1fcf,
  0x1fdd,
  0x1fde,
  0x1fdf,
  0x1fed,
  0x1fee,
  0x1fef,
  0x1ffd,
  0x1ffe,
  0x2cef,
  0x2cf0,
  0x2cf1,
  0x2e2f,
  0x302a,
  0x302b,
  0x302c,
  0x302d,
  0x302e,
  0x302f,
  0x3099,
  0x309a,
  0x309b,
  0x309c,
  0x30fc,
  0xa66f,
  0xa67c,
  0xa67d,
  0xa67f,
  0xa69c,
  0xa69d,
  0xa6f0,
  0xa6f1,
  0xa788,
  0xa789,
  0xa78a,
  0xa7f8,
  0xa7f9,
  0xa8c4,
  0xa92b,
  0xa92c,
  0xa92d,
  0xa92e,
  0xa953,
  0xa9b3,
  0xa9c0,
  0xa9e5,
  0xaa7b,
  0xaa7c,
  0xaa7d,
  0xaabf,
  0xaac0,
  0xaac1,
  0xaac2,
  0xaaf6,
  0xab5b,
  0xab5c,
  0xab5d,
  0xab5e,
  0xab5f,
  0xabec,
  0xabed,
  0xfb1e,
  0xfe20,
  0xfe21,
  0xfe22,
  0xfe23,
  0xfe24,
  0xfe25,
  0xfe26,
  0xfe27,
  0xfe28,
  0xfe29,
  0xfe2a,
  0xfe2b,
  0xfe2c,
  0xfe2d,
  0xfe2e,
  0xfe2f,
  0xff3e,
  0xff40,
  0xff70,
  0xff9e,
  0xff9f,
  0xffe3,
  0x102e0,
  0x10ae5,
  0x10ae6,
  0x10d22,
  0x10d23,
  0x10d24,
  0x10d25,
  0x10d26,
  0x10d27,
  0x10f46,
  0x10f47,
  0x10f48,
  0x10f49,
  0x10f4a,
  0x10f4b,
  0x10f4c,
  0x10f4d,
  0x10f4e,
  0x10f4f,
  0x10f50,
  0x110b9,
  0x110ba,
  0x11133,
  0x11134,
  0x11173,
  0x111c0,
  0x111ca,
  0x111cb,
  0x111cc,
  0x11235,
  0x11236,
  0x112e9,
  0x112ea,
  0x1133c,
  0x1134d,
  0x11366,
  0x11367,
  0x11368,
  0x11369,
  0x1136a,
  0x1136b,
  0x1136c,
  0x11370,
  0x11371,
  0x11372,
  0x11373,
  0x11374,
  0x11442,
  0x11446,
  0x114c2,
  0x114c3,
  0x115bf,
  0x115c0,
  0x1163f,
  0x116b6,
  0x116b7,
  0x1172b,
  0x11839,
  0x1183a,
  0x119e0,
  0x11a34,
  0x11a47,
  0x11a99,
  0x11c3f,
  0x11d42,
  0x11d44,
  0x11d45,
  0x11d97,
  0x16af0,
  0x16af1,
  0x16af2,
  0x16af3,
  0x16af4,
  0x16b30,
  0x16b31,
  0x16b32,
  0x16b33,
  0x16b34,
  0x16b35,
  0x16b36,
  0x1d167,
  0x1d168,
  0x1d169,
  0x1d16d,
  0x1d16e,
  0x1d16f,
  0x1d170,
  0x1d171,
  0x1d172,
  0x1d17b,
  0x1d17c,
  0x1d17d,
  0x1d17e,
  0x1d17f,
  0x1d180,
  0x1d181,
  0x1d182,
  0x1d185,
  0x1d186,
  0x1d187,
  0x1d188,
  0x1d189,
  0x1d18a,
  0x1d18b,
  0x1d1aa,
  0x1d1ab,
  0x1d1ac,
  0x1d1ad,
  0x1e130,
  0x1e131,
  0x1e132,
  0x1e133,
  0x1e134,
  0x1e135,
  0x1e136,
  0x1e2ec,
  0x1e2ed,
  0x1e2ee,
  0x1e2ef,
  0x1e8d0,
  0x1e8d1,
  0x1e8d2,
  0x1e8d3,
  0x1e8d4,
  0x1e8d5,
  0x1e8d6,
  0x1e944,
  0x1e945,
  0x1e946,
  0x1e948,
  0x1e949,
  0x1e94a,
]
private let __prop_Diacritic_range_0: _T2 = 0x2b0....0x34e
private let __prop_Diacritic_range_1: _T2 = 0x591....0x5a1
private let __prop_Diacritic_range_2: _T2 = 0x5a3....0x5bd
private let __prop_Diacritic_range_3: _T2 = 0x730....0x74a
private let __prop_Diacritic_range_4: _T2 = 0x8e3....0x8fe
private let __prop_Diacritic_range_5: _T2 = 0x1cd0....0x1ce8
private let __prop_Diacritic_range_6: _T2 = 0x1d2c....0x1d6a
private let __prop_Diacritic_range_7: _T2 = 0xa700....0xa721
private let __prop_Diacritic_range_8: _T2 = 0xa8e0....0xa8f1
private let __prop_Diacritic_range_9: _T2 = 0x16f8f....0x16f9f
private let __prop_Diacritic_array: _T3 = [
  __prop_Diacritic_range_0,
  __prop_Diacritic_range_1,
  __prop_Diacritic_range_2,
  __prop_Diacritic_range_3,
  __prop_Diacritic_range_4,
  __prop_Diacritic_range_5,
  __prop_Diacritic_range_6,
  __prop_Diacritic_range_7,
  __prop_Diacritic_range_8,
  __prop_Diacritic_range_9,
]
private let __prop_Diacritic_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Diacritic_array)
internal let _prop_Diacritic = UnicodeScalarValueSet(singleValues: __prop_Diacritic_set, ranges: __prop_Diacritic_ranges)
private let __prop_Extender_set: _T1 = [
  0xb7,
  0x2d0,
  0x2d1,
  0x640,
  0x7fa,
  0xe46,
  0xec6,
  0x180a,
  0x1843,
  0x1aa7,
  0x1c36,
  0x1c7b,
  0x3005,
  0x3031,
  0x3032,
  0x3033,
  0x3034,
  0x3035,
  0x309d,
  0x309e,
  0x30fc,
  0x30fd,
  0x30fe,
  0xa015,
  0xa60c,
  0xa9cf,
  0xa9e6,
  0xaa70,
  0xaadd,
  0xaaf3,
  0xaaf4,
  0xff70,
  0x1135d,
  0x115c6,
  0x115c7,
  0x115c8,
  0x11a98,
  0x16b42,
  0x16b43,
  0x16fe0,
  0x16fe1,
  0x16fe3,
  0x1e13c,
  0x1e13d,
  0x1e944,
  0x1e945,
  0x1e946,
]
private let __prop_Extender_array: _T3 = [
]
private let __prop_Extender_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Extender_array)
internal let _prop_Extender = UnicodeScalarValueSet(singleValues: __prop_Extender_set, ranges: __prop_Extender_ranges)
private let __prop_Hex_Digit_set: _T1 = [
  0x30,
  0x31,
  0x32,
  0x33,
  0x34,
  0x35,
  0x36,
  0x37,
  0x38,
  0x39,
  0x41,
  0x42,
  0x43,
  0x44,
  0x45,
  0x46,
  0x61,
  0x62,
  0x63,
  0x64,
  0x65,
  0x66,
  0xff10,
  0xff11,
  0xff12,
  0xff13,
  0xff14,
  0xff15,
  0xff16,
  0xff17,
  0xff18,
  0xff19,
  0xff21,
  0xff22,
  0xff23,
  0xff24,
  0xff25,
  0xff26,
  0xff41,
  0xff42,
  0xff43,
  0xff44,
  0xff45,
  0xff46,
]
private let __prop_Hex_Digit_array: _T3 = [
]
private let __prop_Hex_Digit_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Hex_Digit_array)
internal let _prop_Hex_Digit = UnicodeScalarValueSet(singleValues: __prop_Hex_Digit_set, ranges: __prop_Hex_Digit_ranges)
private let __prop_Hyphen_set: _T1 = [
  0x2d,
  0xad,
  0x58a,
  0x1806,
  0x2010,
  0x2011,
  0x2e17,
  0x30fb,
  0xfe63,
  0xff0d,
  0xff65,
]
private let __prop_Hyphen_array: _T3 = [
]
private let __prop_Hyphen_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Hyphen_array)
internal let _prop_Hyphen = UnicodeScalarValueSet(singleValues: __prop_Hyphen_set, ranges: __prop_Hyphen_ranges)
private let __prop_IDS_Binary_Operator_set: _T1 = [
  0x2ff0,
  0x2ff1,
  0x2ff4,
  0x2ff5,
  0x2ff6,
  0x2ff7,
  0x2ff8,
  0x2ff9,
  0x2ffa,
  0x2ffb,
]
private let __prop_IDS_Binary_Operator_array: _T3 = [
]
private let __prop_IDS_Binary_Operator_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_IDS_Binary_Operator_array)
internal let _prop_IDS_Binary_Operator = UnicodeScalarValueSet(singleValues: __prop_IDS_Binary_Operator_set, ranges: __prop_IDS_Binary_Operator_ranges)
private let __prop_IDS_Trinary_Operator_set: _T1 = [
  0x2ff2,
  0x2ff3,
]
private let __prop_IDS_Trinary_Operator_array: _T3 = [
]
private let __prop_IDS_Trinary_Operator_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_IDS_Trinary_Operator_array)
internal let _prop_IDS_Trinary_Operator = UnicodeScalarValueSet(singleValues: __prop_IDS_Trinary_Operator_set, ranges: __prop_IDS_Trinary_Operator_ranges)
private let __prop_Ideographic_set: _T1 = [
  0x3006,
  0x3007,
  0x3021,
  0x3022,
  0x3023,
  0x3024,
  0x3025,
  0x3026,
  0x3027,
  0x3028,
  0x3029,
  0x3038,
  0x3039,
  0x303a,
]
private let __prop_Ideographic_range_0: _T2 = 0x3400....0x4db5
private let __prop_Ideographic_range_1: _T2 = 0x4e00....0x9fef
private let __prop_Ideographic_range_2: _T2 = 0xf900....0xfa6d
private let __prop_Ideographic_range_3: _T2 = 0xfa70....0xfad9
private let __prop_Ideographic_range_4: _T2 = 0x17000....0x187f7
private let __prop_Ideographic_range_5: _T2 = 0x18800....0x18af2
private let __prop_Ideographic_range_6: _T2 = 0x1b170....0x1b2fb
private let __prop_Ideographic_range_7: _T2 = 0x20000....0x2a6d6
private let __prop_Ideographic_range_8: _T2 = 0x2a700....0x2b734
private let __prop_Ideographic_range_9: _T2 = 0x2b740....0x2b81d
private let __prop_Ideographic_range_a: _T2 = 0x2b820....0x2cea1
private let __prop_Ideographic_range_b: _T2 = 0x2ceb0....0x2ebe0
private let __prop_Ideographic_range_c: _T2 = 0x2f800....0x2fa1d
private let __prop_Ideographic_array: _T3 = [
  __prop_Ideographic_range_0,
  __prop_Ideographic_range_1,
  __prop_Ideographic_range_2,
  __prop_Ideographic_range_3,
  __prop_Ideographic_range_4,
  __prop_Ideographic_range_5,
  __prop_Ideographic_range_6,
  __prop_Ideographic_range_7,
  __prop_Ideographic_range_8,
  __prop_Ideographic_range_9,
  __prop_Ideographic_range_a,
  __prop_Ideographic_range_b,
  __prop_Ideographic_range_c,
]
private let __prop_Ideographic_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Ideographic_array)
internal let _prop_Ideographic = UnicodeScalarValueSet(singleValues: __prop_Ideographic_set, ranges: __prop_Ideographic_ranges)
private let __prop_Join_Control_set: _T1 = [
  0x200c,
  0x200d,
]
private let __prop_Join_Control_array: _T3 = [
]
private let __prop_Join_Control_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Join_Control_array)
internal let _prop_Join_Control = UnicodeScalarValueSet(singleValues: __prop_Join_Control_set, ranges: __prop_Join_Control_ranges)
private let __prop_Logical_Order_Exception_set: _T1 = [
  0xe40,
  0xe41,
  0xe42,
  0xe43,
  0xe44,
  0xec0,
  0xec1,
  0xec2,
  0xec3,
  0xec4,
  0x19b5,
  0x19b6,
  0x19b7,
  0x19ba,
  0xaab5,
  0xaab6,
  0xaab9,
  0xaabb,
  0xaabc,
]
private let __prop_Logical_Order_Exception_array: _T3 = [
]
private let __prop_Logical_Order_Exception_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Logical_Order_Exception_array)
internal let _prop_Logical_Order_Exception = UnicodeScalarValueSet(singleValues: __prop_Logical_Order_Exception_set, ranges: __prop_Logical_Order_Exception_ranges)
private let __prop_Noncharacter_Code_Point_set: _T1 = [
  0xfffe,
  0xffff,
  0x1fffe,
  0x1ffff,
  0x2fffe,
  0x2ffff,
  0x3fffe,
  0x3ffff,
  0x4fffe,
  0x4ffff,
  0x5fffe,
  0x5ffff,
  0x6fffe,
  0x6ffff,
  0x7fffe,
  0x7ffff,
  0x8fffe,
  0x8ffff,
  0x9fffe,
  0x9ffff,
  0xafffe,
  0xaffff,
  0xbfffe,
  0xbffff,
  0xcfffe,
  0xcffff,
  0xdfffe,
  0xdffff,
  0xefffe,
  0xeffff,
  0xffffe,
  0xfffff,
  0x10fffe,
  0x10ffff,
]
private let __prop_Noncharacter_Code_Point_range_0: _T2 = 0xfdd0....0xfdef
private let __prop_Noncharacter_Code_Point_array: _T3 = [
  __prop_Noncharacter_Code_Point_range_0,
]
private let __prop_Noncharacter_Code_Point_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Noncharacter_Code_Point_array)
internal let _prop_Noncharacter_Code_Point = UnicodeScalarValueSet(singleValues: __prop_Noncharacter_Code_Point_set, ranges: __prop_Noncharacter_Code_Point_ranges)
private let __prop_Other_Alphabetic_set: _T1 = [
  0x345,
  0x5b0,
  0x5b1,
  0x5b2,
  0x5b3,
  0x5b4,
  0x5b5,
  0x5b6,
  0x5b7,
  0x5b8,
  0x5b9,
  0x5ba,
  0x5bb,
  0x5bc,
  0x5bd,
  0x5bf,
  0x5c1,
  0x5c2,
  0x5c4,
  0x5c5,
  0x5c7,
  0x610,
  0x611,
  0x612,
  0x613,
  0x614,
  0x615,
  0x616,
  0x617,
  0x618,
  0x619,
  0x61a,
  0x64b,
  0x64c,
  0x64d,
  0x64e,
  0x64f,
  0x650,
  0x651,
  0x652,
  0x653,
  0x654,
  0x655,
  0x656,
  0x657,
  0x659,
  0x65a,
  0x65b,
  0x65c,
  0x65d,
  0x65e,
  0x65f,
  0x670,
  0x6d6,
  0x6d7,
  0x6d8,
  0x6d9,
  0x6da,
  0x6db,
  0x6dc,
  0x6e1,
  0x6e2,
  0x6e3,
  0x6e4,
  0x6e7,
  0x6e8,
  0x6ed,
  0x711,
  0x730,
  0x731,
  0x732,
  0x733,
  0x734,
  0x735,
  0x736,
  0x737,
  0x738,
  0x739,
  0x73a,
  0x73b,
  0x73c,
  0x73d,
  0x73e,
  0x73f,
  0x7a6,
  0x7a7,
  0x7a8,
  0x7a9,
  0x7aa,
  0x7ab,
  0x7ac,
  0x7ad,
  0x7ae,
  0x7af,
  0x7b0,
  0x816,
  0x817,
  0x81b,
  0x81c,
  0x81d,
  0x81e,
  0x81f,
  0x820,
  0x821,
  0x822,
  0x823,
  0x825,
  0x826,
  0x827,
  0x829,
  0x82a,
  0x82b,
  0x82c,
  0x8d4,
  0x8d5,
  0x8d6,
  0x8d7,
  0x8d8,
  0x8d9,
  0x8da,
  0x8db,
  0x8dc,
  0x8dd,
  0x8de,
  0x8df,
  0x8e3,
  0x8e4,
  0x8e5,
  0x8e6,
  0x8e7,
  0x8e8,
  0x8e9,
  0x93a,
  0x93b,
  0x93e,
  0x93f,
  0x940,
  0x941,
  0x942,
  0x943,
  0x944,
  0x945,
  0x946,
  0x947,
  0x948,
  0x949,
  0x94a,
  0x94b,
  0x94c,
  0x94e,
  0x94f,
  0x955,
  0x956,
  0x957,
  0x962,
  0x963,
  0x981,
  0x982,
  0x983,
  0x9be,
  0x9bf,
  0x9c0,
  0x9c1,
  0x9c2,
  0x9c3,
  0x9c4,
  0x9c7,
  0x9c8,
  0x9cb,
  0x9cc,
  0x9d7,
  0x9e2,
  0x9e3,
  0xa01,
  0xa02,
  0xa03,
  0xa3e,
  0xa3f,
  0xa40,
  0xa41,
  0xa42,
  0xa47,
  0xa48,
  0xa4b,
  0xa4c,
  0xa51,
  0xa70,
  0xa71,
  0xa75,
  0xa81,
  0xa82,
  0xa83,
  0xabe,
  0xabf,
  0xac0,
  0xac1,
  0xac2,
  0xac3,
  0xac4,
  0xac5,
  0xac7,
  0xac8,
  0xac9,
  0xacb,
  0xacc,
  0xae2,
  0xae3,
  0xafa,
  0xafb,
  0xafc,
  0xb01,
  0xb02,
  0xb03,
  0xb3e,
  0xb3f,
  0xb40,
  0xb41,
  0xb42,
  0xb43,
  0xb44,
  0xb47,
  0xb48,
  0xb4b,
  0xb4c,
  0xb56,
  0xb57,
  0xb62,
  0xb63,
  0xb82,
  0xbbe,
  0xbbf,
  0xbc0,
  0xbc1,
  0xbc2,
  0xbc6,
  0xbc7,
  0xbc8,
  0xbca,
  0xbcb,
  0xbcc,
  0xbd7,
  0xc00,
  0xc01,
  0xc02,
  0xc03,
  0xc3e,
  0xc3f,
  0xc40,
  0xc41,
  0xc42,
  0xc43,
  0xc44,
  0xc46,
  0xc47,
  0xc48,
  0xc4a,
  0xc4b,
  0xc4c,
  0xc55,
  0xc56,
  0xc62,
  0xc63,
  0xc81,
  0xc82,
  0xc83,
  0xcbe,
  0xcbf,
  0xcc0,
  0xcc1,
  0xcc2,
  0xcc3,
  0xcc4,
  0xcc6,
  0xcc7,
  0xcc8,
  0xcca,
  0xccb,
  0xccc,
  0xcd5,
  0xcd6,
  0xce2,
  0xce3,
  0xd00,
  0xd01,
  0xd02,
  0xd03,
  0xd3e,
  0xd3f,
  0xd40,
  0xd41,
  0xd42,
  0xd43,
  0xd44,
  0xd46,
  0xd47,
  0xd48,
  0xd4a,
  0xd4b,
  0xd4c,
  0xd57,
  0xd62,
  0xd63,
  0xd82,
  0xd83,
  0xdcf,
  0xdd0,
  0xdd1,
  0xdd2,
  0xdd3,
  0xdd4,
  0xdd6,
  0xdd8,
  0xdd9,
  0xdda,
  0xddb,
  0xddc,
  0xddd,
  0xdde,
  0xddf,
  0xdf2,
  0xdf3,
  0xe31,
  0xe34,
  0xe35,
  0xe36,
  0xe37,
  0xe38,
  0xe39,
  0xe3a,
  0xe4d,
  0xeb1,
  0xeb4,
  0xeb5,
  0xeb6,
  0xeb7,
  0xeb8,
  0xeb9,
  0xebb,
  0xebc,
  0xecd,
  0xf8d,
  0xf8e,
  0xf8f,
  0xf90,
  0xf91,
  0xf92,
  0xf93,
  0xf94,
  0xf95,
  0xf96,
  0xf97,
  0x102b,
  0x102c,
  0x102d,
  0x102e,
  0x102f,
  0x1030,
  0x1031,
  0x1032,
  0x1033,
  0x1034,
  0x1035,
  0x1036,
  0x1038,
  0x103b,
  0x103c,
  0x103d,
  0x103e,
  0x1056,
  0x1057,
  0x1058,
  0x1059,
  0x105e,
  0x105f,
  0x1060,
  0x1062,
  0x1063,
  0x1064,
  0x1067,
  0x1068,
  0x1069,
  0x106a,
  0x106b,
  0x106c,
  0x106d,
  0x1071,
  0x1072,
  0x1073,
  0x1074,
  0x1082,
  0x1083,
  0x1084,
  0x1085,
  0x1086,
  0x1087,
  0x1088,
  0x1089,
  0x108a,
  0x108b,
  0x108c,
  0x108d,
  0x108f,
  0x109a,
  0x109b,
  0x109c,
  0x109d,
  0x1712,
  0x1713,
  0x1732,
  0x1733,
  0x1752,
  0x1753,
  0x1772,
  0x1773,
  0x1885,
  0x1886,
  0x18a9,
  0x1920,
  0x1921,
  0x1922,
  0x1923,
  0x1924,
  0x1925,
  0x1926,
  0x1927,
  0x1928,
  0x1929,
  0x192a,
  0x192b,
  0x1930,
  0x1931,
  0x1932,
  0x1933,
  0x1934,
  0x1935,
  0x1936,
  0x1937,
  0x1938,
  0x1a17,
  0x1a18,
  0x1a19,
  0x1a1a,
  0x1a1b,
  0x1a55,
  0x1a56,
  0x1a57,
  0x1a58,
  0x1a59,
  0x1a5a,
  0x1a5b,
  0x1a5c,
  0x1a5d,
  0x1a5e,
  0x1b00,
  0x1b01,
  0x1b02,
  0x1b03,
  0x1b04,
  0x1b35,
  0x1b36,
  0x1b37,
  0x1b38,
  0x1b39,
  0x1b3a,
  0x1b3b,
  0x1b3c,
  0x1b3d,
  0x1b3e,
  0x1b3f,
  0x1b40,
  0x1b41,
  0x1b42,
  0x1b43,
  0x1b80,
  0x1b81,
  0x1b82,
  0x1ba1,
  0x1ba2,
  0x1ba3,
  0x1ba4,
  0x1ba5,
  0x1ba6,
  0x1ba7,
  0x1ba8,
  0x1ba9,
  0x1bac,
  0x1bad,
  0x1be7,
  0x1be8,
  0x1be9,
  0x1bea,
  0x1beb,
  0x1bec,
  0x1bed,
  0x1bee,
  0x1bef,
  0x1bf0,
  0x1bf1,
  0x1de7,
  0x1de8,
  0x1de9,
  0x1dea,
  0x1deb,
  0x1dec,
  0x1ded,
  0x1dee,
  0x1def,
  0x1df0,
  0x1df1,
  0x1df2,
  0x1df3,
  0x1df4,
  0xa674,
  0xa675,
  0xa676,
  0xa677,
  0xa678,
  0xa679,
  0xa67a,
  0xa67b,
  0xa69e,
  0xa69f,
  0xa802,
  0xa80b,
  0xa823,
  0xa824,
  0xa825,
  0xa826,
  0xa827,
  0xa880,
  0xa881,
  0xa8b4,
  0xa8b5,
  0xa8b6,
  0xa8b7,
  0xa8b8,
  0xa8b9,
  0xa8ba,
  0xa8bb,
  0xa8bc,
  0xa8bd,
  0xa8be,
  0xa8bf,
  0xa8c0,
  0xa8c1,
  0xa8c2,
  0xa8c3,
  0xa8c5,
  0xa8ff,
  0xa926,
  0xa927,
  0xa928,
  0xa929,
  0xa92a,
  0xa947,
  0xa948,
  0xa949,
  0xa94a,
  0xa94b,
  0xa94c,
  0xa94d,
  0xa94e,
  0xa94f,
  0xa950,
  0xa951,
  0xa952,
  0xa980,
  0xa981,
  0xa982,
  0xa983,
  0xa9b4,
  0xa9b5,
  0xa9b6,
  0xa9b7,
  0xa9b8,
  0xa9b9,
  0xa9ba,
  0xa9bb,
  0xa9bc,
  0xa9bd,
  0xa9be,
  0xa9bf,
  0xa9e5,
  0xaa29,
  0xaa2a,
  0xaa2b,
  0xaa2c,
  0xaa2d,
  0xaa2e,
  0xaa2f,
  0xaa30,
  0xaa31,
  0xaa32,
  0xaa33,
  0xaa34,
  0xaa35,
  0xaa36,
  0xaa43,
  0xaa4c,
  0xaa4d,
  0xaa7b,
  0xaa7c,
  0xaa7d,
  0xaab0,
  0xaab2,
  0xaab3,
  0xaab4,
  0xaab7,
  0xaab8,
  0xaabe,
  0xaaeb,
  0xaaec,
  0xaaed,
  0xaaee,
  0xaaef,
  0xaaf5,
  0xabe3,
  0xabe4,
  0xabe5,
  0xabe6,
  0xabe7,
  0xabe8,
  0xabe9,
  0xabea,
  0xfb1e,
  0x10376,
  0x10377,
  0x10378,
  0x10379,
  0x1037a,
  0x10a01,
  0x10a02,
  0x10a03,
  0x10a05,
  0x10a06,
  0x10a0c,
  0x10a0d,
  0x10a0e,
  0x10a0f,
  0x10d24,
  0x10d25,
  0x10d26,
  0x10d27,
  0x11000,
  0x11001,
  0x11002,
  0x11038,
  0x11039,
  0x1103a,
  0x1103b,
  0x1103c,
  0x1103d,
  0x1103e,
  0x1103f,
  0x11040,
  0x11041,
  0x11042,
  0x11043,
  0x11044,
  0x11045,
  0x11082,
  0x110b0,
  0x110b1,
  0x110b2,
  0x110b3,
  0x110b4,
  0x110b5,
  0x110b6,
  0x110b7,
  0x110b8,
  0x11100,
  0x11101,
  0x11102,
  0x11127,
  0x11128,
  0x11129,
  0x1112a,
  0x1112b,
  0x1112c,
  0x1112d,
  0x1112e,
  0x1112f,
  0x11130,
  0x11131,
  0x11132,
  0x11145,
  0x11146,
  0x11180,
  0x11181,
  0x11182,
  0x111b3,
  0x111b4,
  0x111b5,
  0x111b6,
  0x111b7,
  0x111b8,
  0x111b9,
  0x111ba,
  0x111bb,
  0x111bc,
  0x111bd,
  0x111be,
  0x111bf,
  0x1122c,
  0x1122d,
  0x1122e,
  0x1122f,
  0x11230,
  0x11231,
  0x11232,
  0x11233,
  0x11234,
  0x11237,
  0x1123e,
  0x112df,
  0x112e0,
  0x112e1,
  0x112e2,
  0x112e3,
  0x112e4,
  0x112e5,
  0x112e6,
  0x112e7,
  0x112e8,
  0x11300,
  0x11301,
  0x11302,
  0x11303,
  0x1133e,
  0x1133f,
  0x11340,
  0x11341,
  0x11342,
  0x11343,
  0x11344,
  0x11347,
  0x11348,
  0x1134b,
  0x1134c,
  0x11357,
  0x11362,
  0x11363,
  0x11435,
  0x11436,
  0x11437,
  0x11438,
  0x11439,
  0x1143a,
  0x1143b,
  0x1143c,
  0x1143d,
  0x1143e,
  0x1143f,
  0x11440,
  0x11441,
  0x11443,
  0x11444,
  0x11445,
  0x115af,
  0x115b0,
  0x115b1,
  0x115b2,
  0x115b3,
  0x115b4,
  0x115b5,
  0x115b8,
  0x115b9,
  0x115ba,
  0x115bb,
  0x115bc,
  0x115bd,
  0x115be,
  0x115dc,
  0x115dd,
  0x11630,
  0x11631,
  0x11632,
  0x11633,
  0x11634,
  0x11635,
  0x11636,
  0x11637,
  0x11638,
  0x11639,
  0x1163a,
  0x1163b,
  0x1163c,
  0x1163d,
  0x1163e,
  0x11640,
  0x116ab,
  0x116ac,
  0x116ad,
  0x116ae,
  0x116af,
  0x116b0,
  0x116b1,
  0x116b2,
  0x116b3,
  0x116b4,
  0x116b5,
  0x1171d,
  0x1171e,
  0x1171f,
  0x11720,
  0x11721,
  0x11722,
  0x11723,
  0x11724,
  0x11725,
  0x11726,
  0x11727,
  0x11728,
  0x11729,
  0x1172a,
  0x1182c,
  0x1182d,
  0x1182e,
  0x1182f,
  0x11830,
  0x11831,
  0x11832,
  0x11833,
  0x11834,
  0x11835,
  0x11836,
  0x11837,
  0x11838,
  0x119d1,
  0x119d2,
  0x119d3,
  0x119d4,
  0x119d5,
  0x119d6,
  0x119d7,
  0x119da,
  0x119db,
  0x119dc,
  0x119dd,
  0x119de,
  0x119df,
  0x119e4,
  0x11a01,
  0x11a02,
  0x11a03,
  0x11a04,
  0x11a05,
  0x11a06,
  0x11a07,
  0x11a08,
  0x11a09,
  0x11a0a,
  0x11a35,
  0x11a36,
  0x11a37,
  0x11a38,
  0x11a39,
  0x11a3b,
  0x11a3c,
  0x11a3d,
  0x11a3e,
  0x11a51,
  0x11a52,
  0x11a53,
  0x11a54,
  0x11a55,
  0x11a56,
  0x11a57,
  0x11a58,
  0x11a59,
  0x11a5a,
  0x11a5b,
  0x11a8a,
  0x11a8b,
  0x11a8c,
  0x11a8d,
  0x11a8e,
  0x11a8f,
  0x11a90,
  0x11a91,
  0x11a92,
  0x11a93,
  0x11a94,
  0x11a95,
  0x11a96,
  0x11a97,
  0x11c2f,
  0x11c30,
  0x11c31,
  0x11c32,
  0x11c33,
  0x11c34,
  0x11c35,
  0x11c36,
  0x11c38,
  0x11c39,
  0x11c3a,
  0x11c3b,
  0x11c3c,
  0x11c3d,
  0x11c3e,
  0x11ca9,
  0x11caa,
  0x11cab,
  0x11cac,
  0x11cad,
  0x11cae,
  0x11caf,
  0x11cb0,
  0x11cb1,
  0x11cb2,
  0x11cb3,
  0x11cb4,
  0x11cb5,
  0x11cb6,
  0x11d31,
  0x11d32,
  0x11d33,
  0x11d34,
  0x11d35,
  0x11d36,
  0x11d3a,
  0x11d3c,
  0x11d3d,
  0x11d3f,
  0x11d40,
  0x11d41,
  0x11d43,
  0x11d47,
  0x11d8a,
  0x11d8b,
  0x11d8c,
  0x11d8d,
  0x11d8e,
  0x11d90,
  0x11d91,
  0x11d93,
  0x11d94,
  0x11d95,
  0x11d96,
  0x11ef3,
  0x11ef4,
  0x11ef5,
  0x11ef6,
  0x16f4f,
  0x16f8f,
  0x16f90,
  0x16f91,
  0x16f92,
  0x1bc9e,
  0x1e000,
  0x1e001,
  0x1e002,
  0x1e003,
  0x1e004,
  0x1e005,
  0x1e006,
  0x1e01b,
  0x1e01c,
  0x1e01d,
  0x1e01e,
  0x1e01f,
  0x1e020,
  0x1e021,
  0x1e023,
  0x1e024,
  0x1e026,
  0x1e027,
  0x1e028,
  0x1e029,
  0x1e02a,
  0x1e947,
]
private let __prop_Other_Alphabetic_range_0: _T2 = 0x8f0....0x903
private let __prop_Other_Alphabetic_range_1: _T2 = 0xf71....0xf81
private let __prop_Other_Alphabetic_range_2: _T2 = 0xf99....0xfbc
private let __prop_Other_Alphabetic_range_3: _T2 = 0x17b6....0x17c8
private let __prop_Other_Alphabetic_range_4: _T2 = 0x1a61....0x1a74
private let __prop_Other_Alphabetic_range_5: _T2 = 0x1c24....0x1c36
private let __prop_Other_Alphabetic_range_6: _T2 = 0x24b6....0x24e9
private let __prop_Other_Alphabetic_range_7: _T2 = 0x2de0....0x2dff
private let __prop_Other_Alphabetic_range_8: _T2 = 0x114b0....0x114c1
private let __prop_Other_Alphabetic_range_9: _T2 = 0x11c92....0x11ca7
private let __prop_Other_Alphabetic_range_a: _T2 = 0x16f51....0x16f87
private let __prop_Other_Alphabetic_range_b: _T2 = 0x1e008....0x1e018
private let __prop_Other_Alphabetic_range_c: _T2 = 0x1f130....0x1f149
private let __prop_Other_Alphabetic_range_d: _T2 = 0x1f150....0x1f169
private let __prop_Other_Alphabetic_range_e: _T2 = 0x1f170....0x1f189
private let __prop_Other_Alphabetic_array: _T3 = [
  __prop_Other_Alphabetic_range_0,
  __prop_Other_Alphabetic_range_1,
  __prop_Other_Alphabetic_range_2,
  __prop_Other_Alphabetic_range_3,
  __prop_Other_Alphabetic_range_4,
  __prop_Other_Alphabetic_range_5,
  __prop_Other_Alphabetic_range_6,
  __prop_Other_Alphabetic_range_7,
  __prop_Other_Alphabetic_range_8,
  __prop_Other_Alphabetic_range_9,
  __prop_Other_Alphabetic_range_a,
  __prop_Other_Alphabetic_range_b,
  __prop_Other_Alphabetic_range_c,
  __prop_Other_Alphabetic_range_d,
  __prop_Other_Alphabetic_range_e,
]
private let __prop_Other_Alphabetic_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Other_Alphabetic_array)
internal let _prop_Other_Alphabetic = UnicodeScalarValueSet(singleValues: __prop_Other_Alphabetic_set, ranges: __prop_Other_Alphabetic_ranges)
private let __prop_Other_Default_Ignorable_Code_Point_set: _T1 = [
  0x34f,
  0x115f,
  0x1160,
  0x17b4,
  0x17b5,
  0x2065,
  0x3164,
  0xffa0,
  0xfff0,
  0xfff1,
  0xfff2,
  0xfff3,
  0xfff4,
  0xfff5,
  0xfff6,
  0xfff7,
  0xfff8,
  0xe0000,
]
private let __prop_Other_Default_Ignorable_Code_Point_range_0: _T2 = 0xe0002....0xe001f
private let __prop_Other_Default_Ignorable_Code_Point_range_1: _T2 = 0xe0080....0xe00ff
private let __prop_Other_Default_Ignorable_Code_Point_range_2: _T2 = 0xe01f0....0xe0fff
private let __prop_Other_Default_Ignorable_Code_Point_array: _T3 = [
  __prop_Other_Default_Ignorable_Code_Point_range_0,
  __prop_Other_Default_Ignorable_Code_Point_range_1,
  __prop_Other_Default_Ignorable_Code_Point_range_2,
]
private let __prop_Other_Default_Ignorable_Code_Point_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Other_Default_Ignorable_Code_Point_array)
internal let _prop_Other_Default_Ignorable_Code_Point = UnicodeScalarValueSet(singleValues: __prop_Other_Default_Ignorable_Code_Point_set, ranges: __prop_Other_Default_Ignorable_Code_Point_ranges)
private let __prop_Other_Grapheme_Extend_set: _T1 = [
  0x9be,
  0x9d7,
  0xb3e,
  0xb57,
  0xbbe,
  0xbd7,
  0xcc2,
  0xcd5,
  0xcd6,
  0xd3e,
  0xd57,
  0xdcf,
  0xddf,
  0x1b35,
  0x200c,
  0x302e,
  0x302f,
  0xff9e,
  0xff9f,
  0x1133e,
  0x11357,
  0x114b0,
  0x114bd,
  0x115af,
  0x1d165,
  0x1d16e,
  0x1d16f,
  0x1d170,
  0x1d171,
  0x1d172,
]
private let __prop_Other_Grapheme_Extend_range_0: _T2 = 0xe0020....0xe007f
private let __prop_Other_Grapheme_Extend_array: _T3 = [
  __prop_Other_Grapheme_Extend_range_0,
]
private let __prop_Other_Grapheme_Extend_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Other_Grapheme_Extend_array)
internal let _prop_Other_Grapheme_Extend = UnicodeScalarValueSet(singleValues: __prop_Other_Grapheme_Extend_set, ranges: __prop_Other_Grapheme_Extend_ranges)
private let __prop_Other_ID_Continue_set: _T1 = [
  0xb7,
  0x387,
  0x1369,
  0x136a,
  0x136b,
  0x136c,
  0x136d,
  0x136e,
  0x136f,
  0x1370,
  0x1371,
  0x19da,
]
private let __prop_Other_ID_Continue_array: _T3 = [
]
private let __prop_Other_ID_Continue_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Other_ID_Continue_array)
internal let _prop_Other_ID_Continue = UnicodeScalarValueSet(singleValues: __prop_Other_ID_Continue_set, ranges: __prop_Other_ID_Continue_ranges)
private let __prop_Other_ID_Start_set: _T1 = [
  0x1885,
  0x1886,
  0x2118,
  0x212e,
  0x309b,
  0x309c,
]
private let __prop_Other_ID_Start_array: _T3 = [
]
private let __prop_Other_ID_Start_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Other_ID_Start_array)
internal let _prop_Other_ID_Start = UnicodeScalarValueSet(singleValues: __prop_Other_ID_Start_set, ranges: __prop_Other_ID_Start_ranges)
private let __prop_Other_Lowercase_set: _T1 = [
  0xaa,
  0xba,
  0x2b0,
  0x2b1,
  0x2b2,
  0x2b3,
  0x2b4,
  0x2b5,
  0x2b6,
  0x2b7,
  0x2b8,
  0x2c0,
  0x2c1,
  0x2e0,
  0x2e1,
  0x2e2,
  0x2e3,
  0x2e4,
  0x345,
  0x37a,
  0x1d78,
  0x2071,
  0x207f,
  0x2090,
  0x2091,
  0x2092,
  0x2093,
  0x2094,
  0x2095,
  0x2096,
  0x2097,
  0x2098,
  0x2099,
  0x209a,
  0x209b,
  0x209c,
  0x2170,
  0x2171,
  0x2172,
  0x2173,
  0x2174,
  0x2175,
  0x2176,
  0x2177,
  0x2178,
  0x2179,
  0x217a,
  0x217b,
  0x217c,
  0x217d,
  0x217e,
  0x217f,
  0x2c7c,
  0x2c7d,
  0xa69c,
  0xa69d,
  0xa770,
  0xa7f8,
  0xa7f9,
  0xab5c,
  0xab5d,
  0xab5e,
  0xab5f,
]
private let __prop_Other_Lowercase_range_0: _T2 = 0x1d2c....0x1d6a
private let __prop_Other_Lowercase_range_1: _T2 = 0x1d9b....0x1dbf
private let __prop_Other_Lowercase_range_2: _T2 = 0x24d0....0x24e9
private let __prop_Other_Lowercase_array: _T3 = [
  __prop_Other_Lowercase_range_0,
  __prop_Other_Lowercase_range_1,
  __prop_Other_Lowercase_range_2,
]
private let __prop_Other_Lowercase_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Other_Lowercase_array)
internal let _prop_Other_Lowercase = UnicodeScalarValueSet(singleValues: __prop_Other_Lowercase_set, ranges: __prop_Other_Lowercase_ranges)
private let __prop_Other_Math_set: _T1 = [
  0x5e,
  0x3d0,
  0x3d1,
  0x3d2,
  0x3d5,
  0x3f0,
  0x3f1,
  0x3f4,
  0x3f5,
  0x2016,
  0x2032,
  0x2033,
  0x2034,
  0x2040,
  0x2061,
  0x2062,
  0x2063,
  0x2064,
  0x207d,
  0x207e,
  0x208d,
  0x208e,
  0x20d0,
  0x20d1,
  0x20d2,
  0x20d3,
  0x20d4,
  0x20d5,
  0x20d6,
  0x20d7,
  0x20d8,
  0x20d9,
  0x20da,
  0x20db,
  0x20dc,
  0x20e1,
  0x20e5,
  0x20e6,
  0x20eb,
  0x20ec,
  0x20ed,
  0x20ee,
  0x20ef,
  0x2102,
  0x2107,
  0x210a,
  0x210b,
  0x210c,
  0x210d,
  0x210e,
  0x210f,
  0x2110,
  0x2111,
  0x2112,
  0x2113,
  0x2115,
  0x2119,
  0x211a,
  0x211b,
  0x211c,
  0x211d,
  0x2124,
  0x2128,
  0x2129,
  0x212c,
  0x212d,
  0x212f,
  0x2130,
  0x2131,
  0x2133,
  0x2134,
  0x2135,
  0x2136,
  0x2137,
  0x2138,
  0x213c,
  0x213d,
  0x213e,
  0x213f,
  0x2145,
  0x2146,
  0x2147,
  0x2148,
  0x2149,
  0x2195,
  0x2196,
  0x2197,
  0x2198,
  0x2199,
  0x219c,
  0x219d,
  0x219e,
  0x219f,
  0x21a1,
  0x21a2,
  0x21a4,
  0x21a5,
  0x21a7,
  0x21a9,
  0x21aa,
  0x21ab,
  0x21ac,
  0x21ad,
  0x21b0,
  0x21b1,
  0x21b6,
  0x21b7,
  0x21d0,
  0x21d1,
  0x21d3,
  0x21d5,
  0x21d6,
  0x21d7,
  0x21d8,
  0x21d9,
  0x21da,
  0x21db,
  0x21dd,
  0x21e4,
  0x21e5,
  0x2308,
  0x2309,
  0x230a,
  0x230b,
  0x23b4,
  0x23b5,
  0x23b7,
  0x23d0,
  0x23e2,
  0x25a0,
  0x25a1,
  0x25ae,
  0x25af,
  0x25b0,
  0x25b1,
  0x25b2,
  0x25b3,
  0x25b4,
  0x25b5,
  0x25b6,
  0x25bc,
  0x25bd,
  0x25be,
  0x25bf,
  0x25c0,
  0x25c6,
  0x25c7,
  0x25ca,
  0x25cb,
  0x25cf,
  0x25d0,
  0x25d1,
  0x25d2,
  0x25d3,
  0x25e2,
  0x25e4,
  0x25e7,
  0x25e8,
  0x25e9,
  0x25ea,
  0x25eb,
  0x25ec,
  0x2605,
  0x2606,
  0x2640,
  0x2642,
  0x2660,
  0x2661,
  0x2662,
  0x2663,
  0x266d,
  0x266e,
  0x27c5,
  0x27c6,
  0x27e6,
  0x27e7,
  0x27e8,
  0x27e9,
  0x27ea,
  0x27eb,
  0x27ec,
  0x27ed,
  0x27ee,
  0x27ef,
  0x29d8,
  0x29d9,
  0x29da,
  0x29db,
  0x29fc,
  0x29fd,
  0xfe61,
  0xfe63,
  0xfe68,
  0xff3c,
  0xff3e,
  0x1d49e,
  0x1d49f,
  0x1d4a2,
  0x1d4a5,
  0x1d4a6,
  0x1d4a9,
  0x1d4aa,
  0x1d4ab,
  0x1d4ac,
  0x1d4ae,
  0x1d4af,
  0x1d4b0,
  0x1d4b1,
  0x1d4b2,
  0x1d4b3,
  0x1d4b4,
  0x1d4b5,
  0x1d4b6,
  0x1d4b7,
  0x1d4b8,
  0x1d4b9,
  0x1d4bb,
  0x1d4bd,
  0x1d4be,
  0x1d4bf,
  0x1d4c0,
  0x1d4c1,
  0x1d4c2,
  0x1d4c3,
  0x1d507,
  0x1d508,
  0x1d509,
  0x1d50a,
  0x1d50d,
  0x1d50e,
  0x1d50f,
  0x1d510,
  0x1d511,
  0x1d512,
  0x1d513,
  0x1d514,
  0x1d516,
  0x1d517,
  0x1d518,
  0x1d519,
  0x1d51a,
  0x1d51b,
  0x1d51c,
  0x1d53b,
  0x1d53c,
  0x1d53d,
  0x1d53e,
  0x1d540,
  0x1d541,
  0x1d542,
  0x1d543,
  0x1d544,
  0x1d546,
  0x1d54a,
  0x1d54b,
  0x1d54c,
  0x1d54d,
  0x1d54e,
  0x1d54f,
  0x1d550,
  0x1d7c4,
  0x1d7c5,
  0x1d7c6,
  0x1d7c7,
  0x1d7c8,
  0x1d7c9,
  0x1d7ca,
  0x1d7cb,
  0x1ee00,
  0x1ee01,
  0x1ee02,
  0x1ee03,
  0x1ee21,
  0x1ee22,
  0x1ee24,
  0x1ee27,
  0x1ee29,
  0x1ee2a,
  0x1ee2b,
  0x1ee2c,
  0x1ee2d,
  0x1ee2e,
  0x1ee2f,
  0x1ee30,
  0x1ee31,
  0x1ee32,
  0x1ee34,
  0x1ee35,
  0x1ee36,
  0x1ee37,
  0x1ee39,
  0x1ee3b,
  0x1ee42,
  0x1ee47,
  0x1ee49,
  0x1ee4b,
  0x1ee4d,
  0x1ee4e,
  0x1ee4f,
  0x1ee51,
  0x1ee52,
  0x1ee54,
  0x1ee57,
  0x1ee59,
  0x1ee5b,
  0x1ee5d,
  0x1ee5f,
  0x1ee61,
  0x1ee62,
  0x1ee64,
  0x1ee67,
  0x1ee68,
  0x1ee69,
  0x1ee6a,
  0x1ee6c,
  0x1ee6d,
  0x1ee6e,
  0x1ee6f,
  0x1ee70,
  0x1ee71,
  0x1ee72,
  0x1ee74,
  0x1ee75,
  0x1ee76,
  0x1ee77,
  0x1ee79,
  0x1ee7a,
  0x1ee7b,
  0x1ee7c,
  0x1ee7e,
  0x1ee80,
  0x1ee81,
  0x1ee82,
  0x1ee83,
  0x1ee84,
  0x1ee85,
  0x1ee86,
  0x1ee87,
  0x1ee88,
  0x1ee89,
  0x1eea1,
  0x1eea2,
  0x1eea3,
  0x1eea5,
  0x1eea6,
  0x1eea7,
  0x1eea8,
  0x1eea9,
]
private let __prop_Other_Math_range_0: _T2 = 0x21bc....0x21cd
private let __prop_Other_Math_range_1: _T2 = 0x2983....0x2998
private let __prop_Other_Math_range_2: _T2 = 0x1d400....0x1d454
private let __prop_Other_Math_range_3: _T2 = 0x1d456....0x1d49c
private let __prop_Other_Math_range_4: _T2 = 0x1d4c5....0x1d505
private let __prop_Other_Math_range_5: _T2 = 0x1d51e....0x1d539
private let __prop_Other_Math_range_6: _T2 = 0x1d552....0x1d6a5
private let __prop_Other_Math_range_7: _T2 = 0x1d6a8....0x1d6c0
private let __prop_Other_Math_range_8: _T2 = 0x1d6c2....0x1d6da
private let __prop_Other_Math_range_9: _T2 = 0x1d6dc....0x1d6fa
private let __prop_Other_Math_range_a: _T2 = 0x1d6fc....0x1d714
private let __prop_Other_Math_range_b: _T2 = 0x1d716....0x1d734
private let __prop_Other_Math_range_c: _T2 = 0x1d736....0x1d74e
private let __prop_Other_Math_range_d: _T2 = 0x1d750....0x1d76e
private let __prop_Other_Math_range_e: _T2 = 0x1d770....0x1d788
private let __prop_Other_Math_range_f: _T2 = 0x1d78a....0x1d7a8
private let __prop_Other_Math_range_g: _T2 = 0x1d7aa....0x1d7c2
private let __prop_Other_Math_range_h: _T2 = 0x1d7ce....0x1d7ff
private let __prop_Other_Math_range_i: _T2 = 0x1ee05....0x1ee1f
private let __prop_Other_Math_range_j: _T2 = 0x1ee8b....0x1ee9b
private let __prop_Other_Math_range_k: _T2 = 0x1eeab....0x1eebb
private let __prop_Other_Math_array: _T3 = [
  __prop_Other_Math_range_0,
  __prop_Other_Math_range_1,
  __prop_Other_Math_range_2,
  __prop_Other_Math_range_3,
  __prop_Other_Math_range_4,
  __prop_Other_Math_range_5,
  __prop_Other_Math_range_6,
  __prop_Other_Math_range_7,
  __prop_Other_Math_range_8,
  __prop_Other_Math_range_9,
  __prop_Other_Math_range_a,
  __prop_Other_Math_range_b,
  __prop_Other_Math_range_c,
  __prop_Other_Math_range_d,
  __prop_Other_Math_range_e,
  __prop_Other_Math_range_f,
  __prop_Other_Math_range_g,
  __prop_Other_Math_range_h,
  __prop_Other_Math_range_i,
  __prop_Other_Math_range_j,
  __prop_Other_Math_range_k,
]
private let __prop_Other_Math_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Other_Math_array)
internal let _prop_Other_Math = UnicodeScalarValueSet(singleValues: __prop_Other_Math_set, ranges: __prop_Other_Math_ranges)
private let __prop_Other_Uppercase_set: _T1 = [
  0x2160,
  0x2161,
  0x2162,
  0x2163,
  0x2164,
  0x2165,
  0x2166,
  0x2167,
  0x2168,
  0x2169,
  0x216a,
  0x216b,
  0x216c,
  0x216d,
  0x216e,
  0x216f,
]
private let __prop_Other_Uppercase_range_0: _T2 = 0x24b6....0x24cf
private let __prop_Other_Uppercase_range_1: _T2 = 0x1f130....0x1f149
private let __prop_Other_Uppercase_range_2: _T2 = 0x1f150....0x1f169
private let __prop_Other_Uppercase_range_3: _T2 = 0x1f170....0x1f189
private let __prop_Other_Uppercase_array: _T3 = [
  __prop_Other_Uppercase_range_0,
  __prop_Other_Uppercase_range_1,
  __prop_Other_Uppercase_range_2,
  __prop_Other_Uppercase_range_3,
]
private let __prop_Other_Uppercase_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Other_Uppercase_array)
internal let _prop_Other_Uppercase = UnicodeScalarValueSet(singleValues: __prop_Other_Uppercase_set, ranges: __prop_Other_Uppercase_ranges)
private let __prop_Pattern_Syntax_set: _T1 = [
  0x21,
  0x22,
  0x23,
  0x24,
  0x25,
  0x26,
  0x27,
  0x28,
  0x29,
  0x2a,
  0x2b,
  0x2c,
  0x2d,
  0x2e,
  0x2f,
  0x3a,
  0x3b,
  0x3c,
  0x3d,
  0x3e,
  0x3f,
  0x40,
  0x5b,
  0x5c,
  0x5d,
  0x5e,
  0x60,
  0x7b,
  0x7c,
  0x7d,
  0x7e,
  0xa1,
  0xa2,
  0xa3,
  0xa4,
  0xa5,
  0xa6,
  0xa7,
  0xa9,
  0xab,
  0xac,
  0xae,
  0xb0,
  0xb1,
  0xb6,
  0xbb,
  0xbf,
  0xd7,
  0xf7,
  0x2030,
  0x2031,
  0x2032,
  0x2033,
  0x2034,
  0x2035,
  0x2036,
  0x2037,
  0x2038,
  0x2039,
  0x203a,
  0x203b,
  0x203c,
  0x203d,
  0x203e,
  0x2055,
  0x2056,
  0x2057,
  0x2058,
  0x2059,
  0x205a,
  0x205b,
  0x205c,
  0x205d,
  0x205e,
  0x3001,
  0x3002,
  0x3003,
  0x3030,
  0xfd3e,
  0xfd3f,
  0xfe45,
  0xfe46,
]
private let __prop_Pattern_Syntax_range_0: _T2 = 0x2010....0x2027
private let __prop_Pattern_Syntax_range_1: _T2 = 0x2041....0x2053
private let __prop_Pattern_Syntax_range_2: _T2 = 0x2190....0x245f
private let __prop_Pattern_Syntax_range_3: _T2 = 0x2500....0x2775
private let __prop_Pattern_Syntax_range_4: _T2 = 0x2794....0x2bff
private let __prop_Pattern_Syntax_range_5: _T2 = 0x2e00....0x2e7f
private let __prop_Pattern_Syntax_range_6: _T2 = 0x3008....0x3020
private let __prop_Pattern_Syntax_array: _T3 = [
  __prop_Pattern_Syntax_range_0,
  __prop_Pattern_Syntax_range_1,
  __prop_Pattern_Syntax_range_2,
  __prop_Pattern_Syntax_range_3,
  __prop_Pattern_Syntax_range_4,
  __prop_Pattern_Syntax_range_5,
  __prop_Pattern_Syntax_range_6,
]
private let __prop_Pattern_Syntax_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Pattern_Syntax_array)
internal let _prop_Pattern_Syntax = UnicodeScalarValueSet(singleValues: __prop_Pattern_Syntax_set, ranges: __prop_Pattern_Syntax_ranges)
private let __prop_Pattern_White_Space_set: _T1 = [
  0x9,
  0xa,
  0xb,
  0xc,
  0xd,
  0x20,
  0x85,
  0x200e,
  0x200f,
  0x2028,
  0x2029,
]
private let __prop_Pattern_White_Space_array: _T3 = [
]
private let __prop_Pattern_White_Space_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Pattern_White_Space_array)
internal let _prop_Pattern_White_Space = UnicodeScalarValueSet(singleValues: __prop_Pattern_White_Space_set, ranges: __prop_Pattern_White_Space_ranges)
private let __prop_Prepended_Concatenation_Mark_set: _T1 = [
  0x600,
  0x601,
  0x602,
  0x603,
  0x604,
  0x605,
  0x6dd,
  0x70f,
  0x8e2,
  0x110bd,
  0x110cd,
]
private let __prop_Prepended_Concatenation_Mark_array: _T3 = [
]
private let __prop_Prepended_Concatenation_Mark_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Prepended_Concatenation_Mark_array)
internal let _prop_Prepended_Concatenation_Mark = UnicodeScalarValueSet(singleValues: __prop_Prepended_Concatenation_Mark_set, ranges: __prop_Prepended_Concatenation_Mark_ranges)
private let __prop_Quotation_Mark_set: _T1 = [
  0x22,
  0x27,
  0xab,
  0xbb,
  0x2018,
  0x2019,
  0x201a,
  0x201b,
  0x201c,
  0x201d,
  0x201e,
  0x201f,
  0x2039,
  0x203a,
  0x2e42,
  0x300c,
  0x300d,
  0x300e,
  0x300f,
  0x301d,
  0x301e,
  0x301f,
  0xfe41,
  0xfe42,
  0xfe43,
  0xfe44,
  0xff02,
  0xff07,
  0xff62,
  0xff63,
]
private let __prop_Quotation_Mark_array: _T3 = [
]
private let __prop_Quotation_Mark_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Quotation_Mark_array)
internal let _prop_Quotation_Mark = UnicodeScalarValueSet(singleValues: __prop_Quotation_Mark_set, ranges: __prop_Quotation_Mark_ranges)
private let __prop_Radical_set: _T1 = [
]
private let __prop_Radical_range_0: _T2 = 0x2e80....0x2e99
private let __prop_Radical_range_1: _T2 = 0x2e9b....0x2ef3
private let __prop_Radical_range_2: _T2 = 0x2f00....0x2fd5
private let __prop_Radical_array: _T3 = [
  __prop_Radical_range_0,
  __prop_Radical_range_1,
  __prop_Radical_range_2,
]
private let __prop_Radical_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Radical_array)
internal let _prop_Radical = UnicodeScalarValueSet(singleValues: __prop_Radical_set, ranges: __prop_Radical_ranges)
private let __prop_Regional_Indicator_set: _T1 = [
]
private let __prop_Regional_Indicator_range_0: _T2 = 0x1f1e6....0x1f1ff
private let __prop_Regional_Indicator_array: _T3 = [
  __prop_Regional_Indicator_range_0,
]
private let __prop_Regional_Indicator_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Regional_Indicator_array)
internal let _prop_Regional_Indicator = UnicodeScalarValueSet(singleValues: __prop_Regional_Indicator_set, ranges: __prop_Regional_Indicator_ranges)
private let __prop_Sentence_Terminal_set: _T1 = [
  0x21,
  0x2e,
  0x3f,
  0x589,
  0x61e,
  0x61f,
  0x6d4,
  0x700,
  0x701,
  0x702,
  0x7f9,
  0x837,
  0x839,
  0x83d,
  0x83e,
  0x964,
  0x965,
  0x104a,
  0x104b,
  0x1362,
  0x1367,
  0x1368,
  0x166e,
  0x1735,
  0x1736,
  0x1803,
  0x1809,
  0x1944,
  0x1945,
  0x1aa8,
  0x1aa9,
  0x1aaa,
  0x1aab,
  0x1b5a,
  0x1b5b,
  0x1b5e,
  0x1b5f,
  0x1c3b,
  0x1c3c,
  0x1c7e,
  0x1c7f,
  0x203c,
  0x203d,
  0x2047,
  0x2048,
  0x2049,
  0x2e2e,
  0x2e3c,
  0x3002,
  0xa4ff,
  0xa60e,
  0xa60f,
  0xa6f3,
  0xa6f7,
  0xa876,
  0xa877,
  0xa8ce,
  0xa8cf,
  0xa92f,
  0xa9c8,
  0xa9c9,
  0xaa5d,
  0xaa5e,
  0xaa5f,
  0xaaf0,
  0xaaf1,
  0xabeb,
  0xfe52,
  0xfe56,
  0xfe57,
  0xff01,
  0xff0e,
  0xff1f,
  0xff61,
  0x10a56,
  0x10a57,
  0x10f55,
  0x10f56,
  0x10f57,
  0x10f58,
  0x10f59,
  0x11047,
  0x11048,
  0x110be,
  0x110bf,
  0x110c0,
  0x110c1,
  0x11141,
  0x11142,
  0x11143,
  0x111c5,
  0x111c6,
  0x111cd,
  0x111de,
  0x111df,
  0x11238,
  0x11239,
  0x1123b,
  0x1123c,
  0x112a9,
  0x1144b,
  0x1144c,
  0x115c2,
  0x115c3,
  0x115c9,
  0x115ca,
  0x115cb,
  0x115cc,
  0x115cd,
  0x115ce,
  0x115cf,
  0x115d0,
  0x115d1,
  0x115d2,
  0x115d3,
  0x115d4,
  0x115d5,
  0x115d6,
  0x115d7,
  0x11641,
  0x11642,
  0x1173c,
  0x1173d,
  0x1173e,
  0x11a42,
  0x11a43,
  0x11a9b,
  0x11a9c,
  0x11c41,
  0x11c42,
  0x11ef7,
  0x11ef8,
  0x16a6e,
  0x16a6f,
  0x16af5,
  0x16b37,
  0x16b38,
  0x16b44,
  0x16e98,
  0x1bc9f,
  0x1da88,
]
private let __prop_Sentence_Terminal_array: _T3 = [
]
private let __prop_Sentence_Terminal_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Sentence_Terminal_array)
internal let _prop_Sentence_Terminal = UnicodeScalarValueSet(singleValues: __prop_Sentence_Terminal_set, ranges: __prop_Sentence_Terminal_ranges)
private let __prop_Soft_Dotted_set: _T1 = [
  0x69,
  0x6a,
  0x12f,
  0x249,
  0x268,
  0x29d,
  0x2b2,
  0x3f3,
  0x456,
  0x458,
  0x1d62,
  0x1d96,
  0x1da4,
  0x1da8,
  0x1e2d,
  0x1ecb,
  0x2071,
  0x2148,
  0x2149,
  0x2c7c,
  0x1d422,
  0x1d423,
  0x1d456,
  0x1d457,
  0x1d48a,
  0x1d48b,
  0x1d4be,
  0x1d4bf,
  0x1d4f2,
  0x1d4f3,
  0x1d526,
  0x1d527,
  0x1d55a,
  0x1d55b,
  0x1d58e,
  0x1d58f,
  0x1d5c2,
  0x1d5c3,
  0x1d5f6,
  0x1d5f7,
  0x1d62a,
  0x1d62b,
  0x1d65e,
  0x1d65f,
  0x1d692,
  0x1d693,
]
private let __prop_Soft_Dotted_array: _T3 = [
]
private let __prop_Soft_Dotted_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Soft_Dotted_array)
internal let _prop_Soft_Dotted = UnicodeScalarValueSet(singleValues: __prop_Soft_Dotted_set, ranges: __prop_Soft_Dotted_ranges)
private let __prop_Terminal_Punctuation_set: _T1 = [
  0x21,
  0x2c,
  0x2e,
  0x3a,
  0x3b,
  0x3f,
  0x37e,
  0x387,
  0x589,
  0x5c3,
  0x60c,
  0x61b,
  0x61e,
  0x61f,
  0x6d4,
  0x700,
  0x701,
  0x702,
  0x703,
  0x704,
  0x705,
  0x706,
  0x707,
  0x708,
  0x709,
  0x70a,
  0x70c,
  0x7f8,
  0x7f9,
  0x830,
  0x831,
  0x832,
  0x833,
  0x834,
  0x835,
  0x836,
  0x837,
  0x838,
  0x839,
  0x83a,
  0x83b,
  0x83c,
  0x83d,
  0x83e,
  0x85e,
  0x964,
  0x965,
  0xe5a,
  0xe5b,
  0xf08,
  0xf0d,
  0xf0e,
  0xf0f,
  0xf10,
  0xf11,
  0xf12,
  0x104a,
  0x104b,
  0x1361,
  0x1362,
  0x1363,
  0x1364,
  0x1365,
  0x1366,
  0x1367,
  0x1368,
  0x166e,
  0x16eb,
  0x16ec,
  0x16ed,
  0x1735,
  0x1736,
  0x17d4,
  0x17d5,
  0x17d6,
  0x17da,
  0x1802,
  0x1803,
  0x1804,
  0x1805,
  0x1808,
  0x1809,
  0x1944,
  0x1945,
  0x1aa8,
  0x1aa9,
  0x1aaa,
  0x1aab,
  0x1b5a,
  0x1b5b,
  0x1b5d,
  0x1b5e,
  0x1b5f,
  0x1c3b,
  0x1c3c,
  0x1c3d,
  0x1c3e,
  0x1c3f,
  0x1c7e,
  0x1c7f,
  0x203c,
  0x203d,
  0x2047,
  0x2048,
  0x2049,
  0x2e2e,
  0x2e3c,
  0x2e41,
  0x2e4c,
  0x2e4e,
  0x2e4f,
  0x3001,
  0x3002,
  0xa4fe,
  0xa4ff,
  0xa60d,
  0xa60e,
  0xa60f,
  0xa6f3,
  0xa6f4,
  0xa6f5,
  0xa6f6,
  0xa6f7,
  0xa876,
  0xa877,
  0xa8ce,
  0xa8cf,
  0xa92f,
  0xa9c7,
  0xa9c8,
  0xa9c9,
  0xaa5d,
  0xaa5e,
  0xaa5f,
  0xaadf,
  0xaaf0,
  0xaaf1,
  0xabeb,
  0xfe50,
  0xfe51,
  0xfe52,
  0xfe54,
  0xfe55,
  0xfe56,
  0xfe57,
  0xff01,
  0xff0c,
  0xff0e,
  0xff1a,
  0xff1b,
  0xff1f,
  0xff61,
  0xff64,
  0x1039f,
  0x103d0,
  0x10857,
  0x1091f,
  0x10a56,
  0x10a57,
  0x10af0,
  0x10af1,
  0x10af2,
  0x10af3,
  0x10af4,
  0x10af5,
  0x10b3a,
  0x10b3b,
  0x10b3c,
  0x10b3d,
  0x10b3e,
  0x10b3f,
  0x10b99,
  0x10b9a,
  0x10b9b,
  0x10b9c,
  0x10f55,
  0x10f56,
  0x10f57,
  0x10f58,
  0x10f59,
  0x11047,
  0x11048,
  0x11049,
  0x1104a,
  0x1104b,
  0x1104c,
  0x1104d,
  0x110be,
  0x110bf,
  0x110c0,
  0x110c1,
  0x11141,
  0x11142,
  0x11143,
  0x111c5,
  0x111c6,
  0x111cd,
  0x111de,
  0x111df,
  0x11238,
  0x11239,
  0x1123a,
  0x1123b,
  0x1123c,
  0x112a9,
  0x1144b,
  0x1144c,
  0x1144d,
  0x1145b,
  0x115c2,
  0x115c3,
  0x115c4,
  0x115c5,
  0x115c9,
  0x115ca,
  0x115cb,
  0x115cc,
  0x115cd,
  0x115ce,
  0x115cf,
  0x115d0,
  0x115d1,
  0x115d2,
  0x115d3,
  0x115d4,
  0x115d5,
  0x115d6,
  0x115d7,
  0x11641,
  0x11642,
  0x1173c,
  0x1173d,
  0x1173e,
  0x11a42,
  0x11a43,
  0x11a9b,
  0x11a9c,
  0x11aa1,
  0x11aa2,
  0x11c41,
  0x11c42,
  0x11c43,
  0x11c71,
  0x11ef7,
  0x11ef8,
  0x12470,
  0x12471,
  0x12472,
  0x12473,
  0x12474,
  0x16a6e,
  0x16a6f,
  0x16af5,
  0x16b37,
  0x16b38,
  0x16b39,
  0x16b44,
  0x16e97,
  0x16e98,
  0x1bc9f,
  0x1da87,
  0x1da88,
  0x1da89,
  0x1da8a,
]
private let __prop_Terminal_Punctuation_array: _T3 = [
]
private let __prop_Terminal_Punctuation_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Terminal_Punctuation_array)
internal let _prop_Terminal_Punctuation = UnicodeScalarValueSet(singleValues: __prop_Terminal_Punctuation_set, ranges: __prop_Terminal_Punctuation_ranges)
private let __prop_Unified_Ideograph_set: _T1 = [
  0xfa0e,
  0xfa0f,
  0xfa11,
  0xfa13,
  0xfa14,
  0xfa1f,
  0xfa21,
  0xfa23,
  0xfa24,
  0xfa27,
  0xfa28,
  0xfa29,
]
private let __prop_Unified_Ideograph_range_0: _T2 = 0x3400....0x4db5
private let __prop_Unified_Ideograph_range_1: _T2 = 0x4e00....0x9fef
private let __prop_Unified_Ideograph_range_2: _T2 = 0x20000....0x2a6d6
private let __prop_Unified_Ideograph_range_3: _T2 = 0x2a700....0x2b734
private let __prop_Unified_Ideograph_range_4: _T2 = 0x2b740....0x2b81d
private let __prop_Unified_Ideograph_range_5: _T2 = 0x2b820....0x2cea1
private let __prop_Unified_Ideograph_range_6: _T2 = 0x2ceb0....0x2ebe0
private let __prop_Unified_Ideograph_array: _T3 = [
  __prop_Unified_Ideograph_range_0,
  __prop_Unified_Ideograph_range_1,
  __prop_Unified_Ideograph_range_2,
  __prop_Unified_Ideograph_range_3,
  __prop_Unified_Ideograph_range_4,
  __prop_Unified_Ideograph_range_5,
  __prop_Unified_Ideograph_range_6,
]
private let __prop_Unified_Ideograph_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Unified_Ideograph_array)
internal let _prop_Unified_Ideograph = UnicodeScalarValueSet(singleValues: __prop_Unified_Ideograph_set, ranges: __prop_Unified_Ideograph_ranges)
private let __prop_Variation_Selector_set: _T1 = [
  0x180b,
  0x180c,
  0x180d,
  0xfe00,
  0xfe01,
  0xfe02,
  0xfe03,
  0xfe04,
  0xfe05,
  0xfe06,
  0xfe07,
  0xfe08,
  0xfe09,
  0xfe0a,
  0xfe0b,
  0xfe0c,
  0xfe0d,
  0xfe0e,
  0xfe0f,
]
private let __prop_Variation_Selector_range_0: _T2 = 0xe0100....0xe01ef
private let __prop_Variation_Selector_array: _T3 = [
  __prop_Variation_Selector_range_0,
]
private let __prop_Variation_Selector_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_Variation_Selector_array)
internal let _prop_Variation_Selector = UnicodeScalarValueSet(singleValues: __prop_Variation_Selector_set, ranges: __prop_Variation_Selector_ranges)
private let __prop_White_Space_set: _T1 = [
  0x9,
  0xa,
  0xb,
  0xc,
  0xd,
  0x20,
  0x85,
  0xa0,
  0x1680,
  0x2000,
  0x2001,
  0x2002,
  0x2003,
  0x2004,
  0x2005,
  0x2006,
  0x2007,
  0x2008,
  0x2009,
  0x200a,
  0x2028,
  0x2029,
  0x202f,
  0x205f,
  0x3000,
]
private let __prop_White_Space_array: _T3 = [
]
private let __prop_White_Space_ranges = MultipleRanges<Unicode.Scalar.Value>(carefullySortedRanges: __prop_White_Space_array)
internal let _prop_White_Space = UnicodeScalarValueSet(singleValues: __prop_White_Space_set, ranges: __prop_White_Space_ranges)
